{"version":3,"sources":["modules/cards/Cards.tsx","modules/navbars/Status.tsx","modules/navbars/Type.tsx","modules/constants/Constants.tsx","modules/cricket-main/CricketSite.tsx","serviceWorker.ts","index.tsx"],"names":["Cards","props","className","data","seriesName","matchNumber","venue","src","alt","homeTeamName","awayTeamName","toss","Status","activeButton","href","onClick","buttonChange","Type","activeTab","tabChange","status","index","name","type","CricketSite","fetchData","fetch","method","headers","body","JSON","stringify","query","then","response","json","responseAsJson","setState","schedule","state","statusChange","fetchUpdateDate","a","async","statusData","getStatus","typeData","getType","statusId","find","typeId","this","map","matchData","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0a441223.chunk.js","sourcesContent":["import React from 'react';\nimport { IMatchData } from '../models/CricketData';\n\ninterface IProps {\n    data: IMatchData;\n}\n\nexport default function Cards(props: IProps) {\n    return (\n        <div className=\"cards main-div-1\">\n            <span className=\"series-name\">\n                <span className=\"f6 lh-copy measure\">{props.data.seriesName}</span>\n                <i className=\"fa fa-angle-right arrow-icon\"></i>\n            </span>\n            <hr></hr>\n            <div className=\"match-details\">\n                <p className=\"f6 lh-copy measure\">{props.data.matchNumber} <span className=\"dot\"></span> {props.data.venue}</p>\n                <div>\n                    <div className=\"inline-country-details\">\n                        <img src=\"https://image.flaticon.com/icons/svg/206/206626.svg\" className=\"br-40 dib image-size\" alt=\"Pic not found\"></img>\n                        <span className=\"f6 lh-copy measure\">{props.data.homeTeamName}</span>\n                    </div>\n                </div>\n                <div>\n                    <div>\n                        <img src=\"https://image.flaticon.com/icons/svg/206/206758.svg\" className=\"br-40 dib image-size\" alt=\"Pic not found\"></img>\n                        <span className=\"f6 lh-copy measure\">{props.data.awayTeamName}</span>\n                    </div>\n                </div>\n                <div className=\"time\">\n                    <p className=\"text-time\">{props.data.toss}</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\n\ninterface IProps {\n    buttonChange: (index: number) => void;\n    activeButton: number;\n}\n\nexport default function Status(props: IProps) {\n    return (\n        <div className=\"tc pb3 padding-top main-div-1\">\n            <a className={props.activeButton === 0 ? \"f6 f5-ns dib ba pv2 ph1 no-border active-color\" : \"gray f6 f5-ns dib ba pv2 ph1 no-border\"} href=\"#\" onClick={() => props.buttonChange(0)}>UPCOMING</a>\n            <a className={props.activeButton === 1 ? \"f6 f5-ns dib ba pv2 ph1 no-border active-color\" : \"gray f6 f5-ns dib ba pv2 ph1 no-border\"} href=\"#\" onClick={() => props.buttonChange(1)}>RUNNING</a>\n            <a className={props.activeButton === 2 ? \"f6 f5-ns dib ba pv2 ph1 no-border active-color\" : \"gray f6 f5-ns dib ba pv2 ph1 no-border\"} href=\"#\" onClick={() => props.buttonChange(2)}>COMPLETED</a>\n        </div>\n    )\n}\n","import React from 'react';\n\ninterface IProps {\n    tabChange: (index: number) => void;\n    activeTab: number;\n}\n\nexport default function Type(props: IProps) {\n    return (\n        <div className=\"padding-top main-div-1\">\n            <a className={props.activeTab === 0 ? \"gray f6 f5-ns dib pv2 ph1 nav-bar active-tab\" : \"gray f6 f5-ns dib pv2 ph1 nav-bar\"} href=\"#\" onClick={() => props.tabChange(0)}>All</a>\n            <a className={props.activeTab === 1 ? \"gray f6 f5-ns dib pv2 ph1 nav-bar active-tab\" : \"gray f6 f5-ns dib pv2 ph1 nav-bar\"} href=\"#\" onClick={() => props.tabChange(1)}>International</a>\n            <a className={props.activeTab === 2 ? \"gray f6 f5-ns dib pv2 ph1 nav-bar active-tab\" : \"gray f6 f5-ns dib pv2 ph1 nav-bar\"} href=\"#\" onClick={() => props.tabChange(2)}>Domestic</a>\n        </div>\n    )\n}\n","export const status = [\n    {\n        index: 0,\n        name: 'running',\n    },\n    {\n        index: 1,\n        name: 'upcoming',\n    },\n    {\n        index: 2,\n        name: 'completed',\n    }\n];\n\nexport const type = [\n    {\n        index: 0,\n        name: 'all',\n    },\n    {\n        index: 1,\n        name: 'international',\n    },\n    {\n        index: 2,\n        name: 'domestic',\n    }\n];\n","import React from 'react';\nimport Card from '../cards/Cards';\nimport Status from '../navbars/Status';\nimport Type from '../navbars/Type'\nimport { status, type} from '../constants/Constants';\nimport { IMatchData } from '../models/CricketData';\n\ninterface IState {\n  status: number;\n  type: number;\n  data: any;\n}\n\nexport class CricketSite extends React.Component<any, IState> {\n\n  /*\n    # We will have **ComponentDidMount** life cycle method with default params i.e \n                           Status - Running, Type - All\n    # Then after getting response, we will set the data to out local state and wil display the result. \n  */\n  public componentDidMount() {\n    this.fetchData();\n  }\n\n  public fetchData = () => {\n    fetch('https://api.devcdc.com/cricket', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: `query getMatchSchedule {\n          schedule(type:\"all\", status: \"running\", page: 0){\n            matchID,\n            seriesName,\n            homeTeamName,\n            awayTeamName,\n            toss,\n            matchNumber,\n            venue,\n          }\n        }`,\n      }),\n    })\n      .then(response => {\n        return response.json()\n      })\n      .then(responseAsJson => {\n        this.setState({ data: responseAsJson.data.schedule })\n      })\n  }\n  /*\n    # We will also have **ComponentDidUpdate** life cycle method, once the user clicks on any of the\n    filter, we will make API call with updated filters and will check on this method that if any of the props\n    value changes, we will update the state will current props.\n  */\n\n  public state = {\n    status: 0,\n    type: 0,\n    data: [],\n  }\n\n  public render() {\n    return (\n      <div>\n        <div className=\"main\">\n          <h2>Schedule</h2>\n          <Status buttonChange={this.statusChange} activeButton={this.state.status} />\n          <Type tabChange={this.tabChange} activeTab={this.state.type} />\n          {this.state.data && this.state.data.map((matchData: IMatchData) => {\n            return (<Card data={matchData} />)\n        })}\n        </div>\n      </div>\n    );\n  }\n\n  private statusChange = (index: number) => {\n    this.setState({\n      status: index,\n    });\n    this.fetchUpdateDate(index, this.state.type);\n  }\n\n  private tabChange = (index: number) => {\n    this.setState({\n      type: index,\n    });\n    this.fetchUpdateDate(this.state.status, index);\n  }\n\n  private fetchUpdateDate = async (status: number, type: number) => {\n    const statusData = this.getStatus(status)!;\n    const typeData = this.getType(type)!;\n    fetch('https://api.devcdc.com/cricket', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: `query getMatchSchedule {\n          schedule(type:\"${typeData.name}\", status: \"${statusData.name}\", page: 0){\n            matchID,\n            seriesName,\n            homeTeamName,\n            awayTeamName,\n            toss,\n            matchNumber,\n            venue,\n          }\n        }`,\n      }),\n    })\n      .then(response => {\n        return response.json()\n      })\n      .then(responseAsJson => {\n        this.setState({ data: responseAsJson.data.schedule })\n      })\n  }\n\n  private getStatus = (statusId: number) => {\n    return status.find((data: any) => data.index === statusId)\n  }\n\n  private getType = (typeId: number) => {\n    return type.find((data: any) => data.index === typeId)\n  }\n}\n\nexport default CricketSite;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CricketSite from './modules/cricket-main/CricketSite';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<CricketSite />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}